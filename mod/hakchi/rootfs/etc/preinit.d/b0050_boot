#!/bin/sh

getCmdLine(){
  dd status=none "if=$1" bs=64 count=8 skip=1 | tr -d '\0' | tr ' ' '\n'
  echo
}

getCmdLinePadded(){
  cat "$1" | xargs
  dd status=none conv=notrunc "if=/dev/zero" bs=64 count=8
}

setCmdLine(){
  getCmdLinePadded "$2" | dd status=none conv=notrunc "of=$1" bs=64 count=8 seek=1
}

encodeKeyFile(){
  local keyfile="/key-file"
  [ -f "$keyfile" ] || keyfile="$rootfs/etc/key-file"
  [ -f "$keyfile" ] || return 1
  echo "$modname-key-file=base64:$(base64 "$keyfile")"
}

insertKeyFile(){
  local cmdline="$temppath/cmdline"
  getCmdLine "$1" | grep -Fv "${modname}-" > "$cmdline"
  encodeKeyFile >> "$cmdline"
  setCmdLine "$1" "$cmdline"
  rm -f "$cmdline"
}

readBoot2(){
  sunxi-flash read_boot2 ${1+"$@"}
}

readBackup2(){
  readBoot2 68
}

validBoot2f(){
  [ -f "$1" ] || return 1
  sntool check "$1" >/dev/null && return 0
  echo "invalid image: $1" 1>&2
  return 1
}

validBoot2n(){
  local offs="$1"
  [ "$offs" -eq "$offs" ] 2>/dev/null || offs="30"
  readBoot2 "$offs" >/dev/null && return 0
  echo "invalid image on nand at sector: $offs" 1>&2
  return 1
}

flashBoot2(){
  local bootimg="$1"
  validBoot2f "$bootimg" || return 1
  local offset="$2"
  [ -z "$offset" ] && offset=30
  local md5i="$(dd status=none bs=128K "if=$bootimg" | md5sum | awk '{print $1}')"
  dd status=none bs=128K "if=$bootimg" | sunxi-flash burn_boot2 "$offset"
  validBoot2n || dd status=none bs=128K "if=$bootimg" | sunxi-flash burn_boot2 "$offset"
  local md5f="$(readBoot2 "$offset" | md5sum | awk '{print $1}')"
  [ "$md5i" = "$md5f" ] && return 0
  echo "flash md5 mismatch! $md5i($bootimg) != $md5f(flash+$offset)"
  return 1
}

isOriginalBoot2(){
  validBoot2n || return 1
  [ "$(sunxi-flash ramdisk | cpio -t 2>/dev/null | grep -F "$modname" | wc -l)" = "0" ] && return 0
  return 1
}

haveBackup2(){
  validBoot2n 68
}

backupBoot2(){
  haveBackup2 && return 0
  isOriginalBoot2 || return 1
  local bootimg="$temppath/boot.img"
  readBoot2 > "$bootimg" || return 1
  flashBoot2 "$bootimg" 68 || return 1
  rm -f "$bootimg"
}

restoreBoot2(){
  haveBackup2 || return 1
  local bootimg="$temppath/boot.img"
  readBackup2 > "$bootimg" || return 1
  flashBoot2 "$bootimg" || return 1
  rm -f "$bootimg"
}

installBoot2(){
  backupBoot2
  insertKeyFile "$1"
  if [ -d "$rootfs/boot" ]; then
    copy "$1" "$rootfs/boot/"
  else
    flashBoot2 ${1+"$@"}
  fi
}

memboot(){
  local bootimg="$1";shift
  validBoot2f "$bootimg" || return 1
  local cmdline="$(getCmdLine "$bootimg" | (grep -v "$modname-*shell"; echo "$@") | xargs)"
  echo "memboot $bootimg $cmdline"
  kexec -l -t zImage "$bootimg" "--command-line=$cmdline" --atags || return 1
  trap ":" HUP TERM
  killall -q clovershell
  uistop
  sync
  cd /
  umount -a -r 2>/dev/null
  disableUsbDevice
  kexec -e
  while :;do sleep 1;:;done
}

reboot_kexec(){
  local bootimg="$1"
  if [ -f "$bootimg" ]; then
    shift
  else
    bootimg="$rootfs/boot/boot.img"
    if [ ! -f "$bootimg" ]; then
      bootimg="$temppath/boot.img"
      readBoot2 > "$bootimg" || return 1
    fi
  fi
  memboot "$bootimg" "$modname-chainload" ${1+"$@"}
}

clovershellActive(){
  [ "$cf_clovershell" = "y" ] && return 0
  (ps | grep -vF grep;pack_list) | grep -qF clovershell
}

recovery(){
  local bootimg="$1"
  [ -f "$bootimg" ] && shift || bootimg=""
  local rshell="$modname-shell"
  clovershellActive && rshell="$modname-clovershell"
  echo "$*" | grep -q "$modname-*shell" && rshell=""
  reboot_kexec "$bootimg" "$rshell" ${1+"$@"}
}

getBackup2(){
  if haveBackup2; then
    readBackup2
  else
    isOriginalBoot2 || return 1
    readBoot2
  fi
}

bootBackup2(){
  local bootimg="$temppath/boot.img"
  getBackup2 > "$bootimg" && memboot "$bootimg"
  rm -f "$bootimg"
  return 1
}
