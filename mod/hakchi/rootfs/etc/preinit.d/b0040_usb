#!/bin/sh

setSysNode(){
  local node="$1"
  local value="$2"
  [ -f "$node" ] || return 1
  [ "$(cat "$node")" = "$value" ] && return 0
  echo "$value" > "$node"
}

disableUsbGadget(){
  [ "$(usbMode)" = "device" ] || return 0
  setSysNode "/sys/devices/virtual/android_usb/android0/enable" 0
}

disableUsbDevice(){
  disableUsbGadget
  #disable usb
  setSysNode "/sys/devices/sunxi_usb/usb_role" 0
}

switchToUsbDevice(){
  [ "$(usbMode)" = "device" ] && return 0
  disableUsbDevice || return 1
  # enable device mode
  setSysNode "/sys/devices/sunxi_usb/usb_role" 2 || return 1
  # make sure the usb gadgets are disabled
  disableUsbGadget
}

switchToUsbHost(){
  [ "$(usbMode)" = "host" ] && return 0
  disableUsbDevice || return 1
  # enable host mode
  setSysNode "/sys/devices/sunxi_usb/usb_role" 1
}

switchToUsbOTG(){
  switchToUsbHost
  # the usb driver needs some time to initialize
  if ! timeout="" waittimeout 800 'lsusb | grep -qFv "1d6b:"' "usbhost"; then
    switchToUsbDevice
  fi
}

usbMode(){
  if ! [ -f "/sys/devices/sunxi_usb/usb_role" ]; then
    echo "device"
    return 0
  fi
  case "$(cat "/sys/devices/sunxi_usb/usb_role")" in
    0) echo "off";;
    1) echo "host";;
    2) echo "device";;
    *) echo "idk";;
  esac
}

getUsbStorageIds(){
  [ -e "/dev/bus/usb" ] || return 1
  find "/dev/bus/usb/" -type c | while read device; do
    hexdump -n 1 -s 32 "$device" -C | grep -e '^00000020  08' && echo "$device"
  done
}

waitForStorageDevice(){
  waittimeout "" "[ -b $1 ]" "$1"
}

checkStorageDevice(){
  local blockDevice="$1"
  [ -b "$blockDevice" ] || return 1

  local ro="defaults,nosuid,nodev,noatime,ro"
  local rw="defaults,nosuid,nodev,noatime,rw"
  local saves="$modname/saves"

  if ! [ "$cfg_usb_rw" == "y" ]; then
    umount_if "$mountpoint/media"
    mount -o $ro "$blockDevice" "$mountpoint/media" 2>/dev/null || return 1
  fi

  if [ -d "$mountpoint/media/$saves" ] || [ -d "$mountpoint/media/$modname/transfer" ] || [ "$cfg_usb_rw" == "y" ]; then
    umount_if "$mountpoint/media"
    mount -o $rw "$blockDevice" "$mountpoint/media" 2>/dev/null || return 1
    [ -d "$mountpoint/media/$modname" ] && \
    copy "$mountpoint/var/version" "$mountpoint/media/$modname/version"
    hmod list | tmpcopy "$mountpoint/media/$modname/hmods"
  fi

  if ! [ -d "$mountpoint/media/$modname" ]; then
    umount_if "$mountpoint/media"
    return 1
  fi

  [ -d "$mountpoint/media/$saves" ] && mount_bind "$mountpoint/media/$saves" "$mountpoint$profilepath"

  local bootlogo0="boot.png"
  local bootlogo1="$mountpoint/media/$modname/$bootlogo0"
  local bootlogo2="$rootfs/etc/$bootlogo0"
  if [ -f "$bootlogo1" ]; then
    copy "$bootlogo1" "$bootlogo2"
    showImage "$bootlogo2"
    cfg_boot_logo=''
  else
    false && [ -f "$bootlogo2" ] && rm -f "$bootlogo2" && source "$preinit.d/p7010_bootlogo"
  fi

  local bootsound0="boot.wav"
  local bootsound1="$mountpoint/media/$modname/$bootsound0"
  local bootsound2="$rootfs/etc/$bootsound0"
  if [ -f "$bootsound1" ]; then
    [ -f "$bootsound2" ] || playSound "$bootsound1"
    copy "$bootsound1" "$bootsound2"
  else
    rm -f "$bootsound2"
  fi

  return 0
}

checkExtStorage(){
  local timeout="10000"

  local di
  local d
  local p
  local blockDevice="/dev/sd"

  if [ "$(usbMode)" = "host" ] && waittimeout 700 '! [ -z "$(getUsbStorageIds)" ]' "usb storage"; then
    waitForStorageDevice "${blockDevice}a"
    checkStorageDevice "${blockDevice}a" && return 0
    waitForStorageDevice "${blockDevice}a1"
    for di in $(seq 97 99); do
      d="$(printf "\\$(printf %o $di)\n")"
      for p in $(seq 1 9); do
        checkStorageDevice "$blockDevice$d$p" && return 0
      done
    done
  fi

  [ "$timeout" -lt "3000" ] || timeout="3000"
  if mmcUsed && waittimeout timeout 'ls "/sys/block" | grep -qF "mmc"' "sd card"; then
    blockDevice="/dev/mmcblk0"
    waitForStorageDevice timeout "${blockDevice}"
    checkStorageDevice "${blockDevice}" && return 0
    waitForStorageDevice timeout "${blockDevice}p1"
    for p in $(seq 1 9); do
      checkStorageDevice "${blockDevice}p$p" && return 0
    done
  fi

  return 1
}
