#!/bin/sh

transfer_file(){
  [ -f "$1" ] || return 0
  dos2unix -u "$1"
  source "$1"
  local res=$?
  rm -f "$1"
  return $res
}

transfer_default(){
  copy "$transferpath/" "$rootfs/" \
  --exclude "/install" \
  --exclude "/transfer" \
  --exclude "/uninstall" \
  --exclude "*.hmod"
}

transfer_path(){
  local transferpath="$1"
  chown -R 0:0 "$transferpath/"
  find "$transferpath/" -maxdepth 1 -type f -iname "readme" -delete
  find "$transferpath/" -maxdepth 1 -type f -iname "readme.*" -delete
  find "$transferpath/" -maxdepth 1 -type f -iname "*.txt" -delete
  find "$transferpath/" -maxdepth 1 -type f -iname "*.md" -delete
  local docopy=y
  cd "$transferpath"
  for dir in bin sbin usr/bin usr/sbin etc/init.d; do
    [ -d "./$dir" ] && chmod 755 ./$dir/* 2>/dev/null
  done
  [ -d "./etc/preinit.d" ] && chmod 644 ./etc/preinit.d/*
  transfer_file "$transferpath/install" || docopy=n
  cd "$transferpath"
  transfer_file "$transferpath/transfer" || docopy=n
  [ "$docopy" == "y" ] && transfer_default
}

pack_upath(){
  echo "$installpath/hmod/uninstall-$(basename "$1" .hmod)"
}

pack_install(){
  local packFile="$(readlink -f "$1")"
  local packName="$(basename "$1" .hmod)"
  grep -xqF "$packName" "/etc/hmodblacklist" && return 0
  echo "installing $packName..."
  local removetransferpath=""
  if [ -f "$packFile" ]; then
    local transferpath="$temppath/pack_$(rand)"
    removetransferpath="$transferpath"
    rm -rf "$transferpath"
    mkdir -p "$transferpath"
    cd "$transferpath" && tar -xzf "$packFile"
  else
    local transferpath="$packFile"
  fi
  transfer_path "$transferpath"
  if [ -f "$transferpath/uninstall" ] && grep -xqF "no-uninstall" "$transferpath/uninstall"; then
    echo "package $packName installed"
    [ -d "$removetransferpath" ] && rm -rf "$removetransferpath"
    return 0
  fi
  echo "creating uninstall for $packName..."
  echo >> "$transferpath/uninstall"
  echo "# auto-generated" >> "$transferpath/uninstall"
  cd "$transferpath"
  find -type l -exec echo rm -f \"\$rootfs/{}\" + >> "$transferpath/uninstall"
  find -type f -exec echo rm -f \"\$rootfs/{}\" + >> "$transferpath/uninstall"
  find -depth -mindepth 1 -type d -exec echo rmdir \"\$rootfs/{}\" + >> "$transferpath/uninstall"
  [ $(stat -c%s "$transferpath/uninstall") -gt 8 ] || rm -f "$transferpath/uninstall"
  cd /
  local unfile="$(pack_upath "$packFile")"
  if [ -f "$transferpath/uninstall" ]; then
    dos2unix -u "$transferpath/uninstall"
    sed -i "s#rmdir #rmdir --ignore-fail-on-non-empty #" "$transferpath/uninstall"
    mkdir -p "$installpath/hmod"
    copy "$transferpath/uninstall" "$unfile"
  else
    rm -f "$unfile"
  fi
  echo "package $packName installed"
  [ -d "$removetransferpath" ] && rm -rf "$removetransferpath"
  return 0
}

pack_list(){
  if [ -d "$installpath/hmod" ]; then
    for i in $(find "$installpath/hmod/" -maxdepth 1 -type f -name "uninstall-*" | sort); do
      echo "${i##$installpath/hmod/uninstall-}"
    done
  fi
}

pack_uninstall(){
  if [ "$1" == "all" ]; then
    for i in $(pack_list); do
      pack_uninstall "$i"
    done
  else
    local unfile="$(pack_upath "$1")"
    if [ -f "$unfile" ]; then
      local packName="$(basename "$1" .hmod)"
      echo "uninstalling $packName..."
      cd "$rootfs"
      transfer_file "$unfile"
      echo "package $packName uninstalled"
    fi
  fi
  cd /
  rmdir --ignore-fail-on-non-empty "$installpath/hmod"
}

packs_install(){
  [ -d "$1" ] || return 1
  for i in $(find "$1/" -maxdepth 1 -name "*.hmod" | sort); do
    pack_install "$i"
    rm -rf "$i"
  done
}

packs_uninstall(){
  while [ $# -gt 0 ]; do
    pack_uninstall "$1"
    shift
  done
}

curl(){
  if date -uR | grep -qF "1970"; then
    rm -f "$profilepath/shutdown.txt"
    ntpd -qn || return 1
    rm -f "$profilepath/shutdown.txt"
  fi
  if [ -z "$(which curl)" ]; then
    echo "you need curl for that, bub"
    return 1
  fi
  "$(which curl)" -Lf ${1+"$@"}
}

rlist(){
  for url in $(cat "$rootfs/etc/hmodrepos.conf"); do
    curl -s "$url/.repo/list"
  done | grep '.hmod$' | sed 's/.hmod$//g' | sort -u
}

rinstall(){
  while [ $# -gt 0 ]; do
    echo "querying $1..."
    for url in $(cat "$rootfs/etc/hmodrepos.conf"); do
      local hurl="$(curl -s "$url/.repo/$1.hmod/link")"
      if ! [ -z "$hurl" ]; then
        echo "downloading $1..."
        if curl "$hurl" -o "$temppath/$1.hmod" && pack_install "$temppath/$1.hmod"; then
          rm -f "$temppath/$1.hmod"
          break
        else
          rm -f "$temppath/$1.hmod"
          continue
        fi
      fi
    done
    shift
  done
  return 0
}

rshow(){
  while [ $# -gt 0 ]; do
    for url in $(cat "$rootfs/etc/hmodrepos.conf"); do
      curl -s "$url/.repo/$1.hmod/readme.txt" && return 0
      curl -s "$url/.repo/$1.hmod/readme.md" && return 0
    done
    shift
  done
  return 1
}

hmod(){
  while [ $# -gt 0 ]; do
    case "$1" in
      list)
        pack_list || return 1
      ;;
      rlist)
        rlist || return 1
      ;;
      rshow|show)
        shift
        rshow ${1+"$@"}
        return $?
      ;;
      install)
      ;;
      rinstall)
        shift
        rinstall ${1+"$@"}
        return $?
      ;;
      uninstall|remove)
        shift
        packs_uninstall ${1+"$@"}
        return $?
      ;;
      *.hmod)
        pack_install "$1" || return 1
      ;;
      *)
        if [ -e "$1" ]; then
          [ -f "$1" ] && pack_install "$1"
          [ -d "$1" ] && packs_install "$1"
        elif rlist | grep -q "^$1$"; then
          rinstall "$1"
        elif pack_list | grep -qF "$1"; then
          pack_uninstall "$1"
        else
          echo "no package: $1"
          return 1
        fi
      ;;
    esac
    shift
  done
}

update(){
  rinstall "$modname-latest"
}
